// Professional report generation utilities

export interface ReportData {
  title: string;
  projectInfo: {
    name: string;
    engineer: string;
    date: string;
    location: string;
    client?: string;
  };
  inputs: Record<string, any>;
  results: Record<string, any>;
  calculations: Array<{
    step: number;
    description: string;
    formula: string;
    calculation: string;
    result: string;
    reference?: string;
  }>;
  compliance: {
    isCompliant: boolean;
    warnings: string[];
    errors: string[];
  };
  references: string[];
}

export interface ReportTemplate {
  id: string;
  name: string;
  description: string;
  sections: ReportSection[];
}

export interface ReportSection {
  id: string;
  title: string;
  type: 'text' | 'table' | 'calculation' | 'image' | 'chart';
  content?: string;
  data?: any;
  required: boolean;
}

// Standard report templates
export const REPORT_TEMPLATES: ReportTemplate[] = [
  {
    id: 'structural_design',
    name: 'Structural Design Report',
    description: 'Comprehensive structural design documentation',
    sections: [
      { id: 'cover', title: 'Cover Page', type: 'text', required: true },
      { id: 'executive_summary', title: 'Executive Summary', type: 'text', required: true },
      { id: 'design_criteria', title: 'Design Criteria', type: 'table', required: true },
      { id: 'calculations', title: 'Design Calculations', type: 'calculation', required: true },
      { id: 'results', title: 'Results Summary', type: 'table', required: true },
      { id: 'compliance', title: 'Code Compliance', type: 'table', required: true },
      { id: 'drawings', title: 'Design Drawings', type: 'image', required: false },
      { id: 'references', title: 'References', type: 'text', required: true }
    ]
  },
  {
    id: 'calculation_sheet',
    name: 'Calculation Sheet',
    description: 'Detailed calculation documentation',
    sections: [
      { id: 'header', title: 'Project Information', type: 'table', required: true },
      { id: 'inputs', title: 'Design Inputs', type: 'table', required: true },
      { id: 'calculations', title: 'Step-by-Step Calculations', type: 'calculation', required: true },
      { id: 'results', title: 'Final Results', type: 'table', required: true },
      { id: 'checks', title: 'Design Checks', type: 'table', required: true }
    ]
  },
  {
    id: 'summary_report',
    name: 'Summary Report',
    description: 'Concise summary for quick review',
    sections: [
      { id: 'overview', title: 'Project Overview', type: 'text', required: true },
      { id: 'key_results', title: 'Key Results', type: 'table', required: true },
      { id: 'compliance_status', title: 'Compliance Status', type: 'table', required: true },
      { id: 'recommendations', title: 'Recommendations', type: 'text', required: false }
    ]
  }
];

// Generate HTML report
export const generateHTMLReport = (data: ReportData, template: ReportTemplate): string => {
  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${data.title}</title>
    <style>
        ${getReportCSS()}
    </style>
</head>
<body>
    <div class="report-container">
        ${generateReportHeader(data)}
        ${template.sections.map(section => generateSection(section, data)).join('')}
        ${generateReportFooter(data)}
    </div>
</body>
</html>`;

  return html;
};

// Generate report header
const generateReportHeader = (data: ReportData): string => {
  return `
    <header class="report-header">
        <div class="header-content">
            <div class="logo-section">
                <h1>Engineering Report</h1>
                <p class="company-name">Arch Calculator Professional</p>
            </div>
            <div class="project-info">
                <h2>${data.title}</h2>
                <table class="info-table">
                    <tr><td><strong>Project:</strong></td><td>${data.projectInfo.name}</td></tr>
                    <tr><td><strong>Engineer:</strong></td><td>${data.projectInfo.engineer}</td></tr>
                    <tr><td><strong>Date:</strong></td><td>${data.projectInfo.date}</td></tr>
                    <tr><td><strong>Location:</strong></td><td>${data.projectInfo.location}</td></tr>
                    ${data.projectInfo.client ? `<tr><td><strong>Client:</strong></td><td>${data.projectInfo.client}</td></tr>` : ''}
                </table>
            </div>
        </div>
    </header>`;
};

// Generate report footer
const generateReportFooter = (data: ReportData): string => {
  return `
    <footer class="report-footer">
        <div class="footer-content">
            <p>Generated by Arch Calculator Professional on ${new Date().toLocaleString()}</p>
            <p>This report is computer-generated and should be reviewed by a qualified engineer.</p>
        </div>
    </footer>`;
};

// Generate individual sections
const generateSection = (section: ReportSection, data: ReportData): string => {
  switch (section.type) {
    case 'text':
      return generateTextSection(section, data);
    case 'table':
      return generateTableSection(section, data);
    case 'calculation':
      return generateCalculationSection(section, data);
    case 'chart':
      return generateChartSection(section, data);
    default:
      return `<div class="section"><h2>${section.title}</h2><p>Section type not implemented</p></div>`;
  }
};

// Generate text section
const generateTextSection = (section: ReportSection, data: ReportData): string => {
  let content = '';
  
  switch (section.id) {
    case 'executive_summary':
      content = generateExecutiveSummary(data);
      break;
    case 'references':
      content = generateReferences(data);
      break;
    default:
      content = section.content || 'Content not available';
  }

  return `
    <div class="section">
        <h2>${section.title}</h2>
        <div class="content">${content}</div>
    </div>`;
};

// Generate table section
const generateTableSection = (section: ReportSection, data: ReportData): string => {
  let tableContent = '';

  switch (section.id) {
    case 'design_criteria':
      tableContent = generateDesignCriteriaTable(data);
      break;
    case 'inputs':
      tableContent = generateInputsTable(data);
      break;
    case 'results':
      tableContent = generateResultsTable(data);
      break;
    case 'compliance':
      tableContent = generateComplianceTable(data);
      break;
    default:
      tableContent = '<p>Table content not available</p>';
  }

  return `
    <div class="section">
        <h2>${section.title}</h2>
        <div class="table-container">${tableContent}</div>
    </div>`;
};

// Generate calculation section
const generateCalculationSection = (section: ReportSection, data: ReportData): string => {
  const calculationsHTML = data.calculations.map((calc, index) => `
    <div class="calculation-step">
        <div class="step-number">${calc.step}</div>
        <div class="step-content">
            <h4>${calc.description}</h4>
            <div class="formula">
                <strong>Formula:</strong> <code>${calc.formula}</code>
            </div>
            <div class="calculation">
                <strong>Calculation:</strong> ${calc.calculation}
            </div>
            <div class="result">
                <strong>Result:</strong> <span class="result-value">${calc.result}</span>
            </div>
            ${calc.reference ? `<div class="reference"><strong>Reference:</strong> ${calc.reference}</div>` : ''}
        </div>
    </div>
  `).join('');

  return `
    <div class="section">
        <h2>${section.title}</h2>
        <div class="calculations-container">
            ${calculationsHTML}
        </div>
    </div>`;
};

// Generate chart section
const generateChartSection = (section: ReportSection, data: ReportData): string => {
  return `
    <div class="section">
        <h2>${section.title}</h2>
        <div class="chart-container">
            <p>Chart generation not implemented in this version</p>
        </div>
    </div>`;
};

// Helper functions for specific content generation
const generateExecutiveSummary = (data: ReportData): string => {
  const complianceStatus = data.compliance.isCompliant ? 'COMPLIANT' : 'NON-COMPLIANT';
  const statusClass = data.compliance.isCompliant ? 'compliant' : 'non-compliant';

  return `
    <p>This report presents the structural design analysis and calculations for ${data.projectInfo.name}. 
    The design has been performed in accordance with relevant engineering codes and standards.</p>
    
    <div class="compliance-badge ${statusClass}">
        Design Status: ${complianceStatus}
    </div>
    
    ${data.compliance.warnings.length > 0 ? `
        <div class="warnings">
            <h4>Warnings:</h4>
            <ul>
                ${data.compliance.warnings.map(warning => `<li>${warning}</li>`).join('')}
            </ul>
        </div>
    ` : ''}
    
    ${data.compliance.errors.length > 0 ? `
        <div class="errors">
            <h4>Errors:</h4>
            <ul>
                ${data.compliance.errors.map(error => `<li>${error}</li>`).join('')}
            </ul>
        </div>
    ` : ''}
  `;
};

const generateDesignCriteriaTable = (data: ReportData): string => {
  return `
    <table class="data-table">
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Value</th>
                <th>Unit</th>
                <th>Reference</th>
            </tr>
        </thead>
        <tbody>
            ${Object.entries(data.inputs).map(([key, value]) => `
                <tr>
                    <td>${formatParameterName(key)}</td>
                    <td>${value}</td>
                    <td>${getParameterUnit(key)}</td>
                    <td>${getParameterReference(key)}</td>
                </tr>
            `).join('')}
        </tbody>
    </table>
  `;
};

const generateInputsTable = (data: ReportData): string => {
  return generateDesignCriteriaTable(data);
};

const generateResultsTable = (data: ReportData): string => {
  return `
    <table class="data-table">
        <thead>
            <tr>
                <th>Result Parameter</th>
                <th>Value</th>
                <th>Unit</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            ${Object.entries(data.results).map(([key, value]) => `
                <tr>
                    <td>${formatParameterName(key)}</td>
                    <td>${typeof value === 'number' ? value.toFixed(2) : value}</td>
                    <td>${getResultUnit(key)}</td>
                    <td>${getResultStatus(key, value)}</td>
                </tr>
            `).join('')}
        </tbody>
    </table>
  `;
};

const generateComplianceTable = (data: ReportData): string => {
  const allChecks = [
    ...data.compliance.warnings.map(w => ({ type: 'Warning', message: w })),
    ...data.compliance.errors.map(e => ({ type: 'Error', message: e }))
  ];

  if (allChecks.length === 0) {
    return '<p class="compliant">All design checks passed successfully.</p>';
  }

  return `
    <table class="data-table">
        <thead>
            <tr>
                <th>Check Type</th>
                <th>Description</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            ${allChecks.map(check => `
                <tr class="${check.type.toLowerCase()}">
                    <td>${check.type}</td>
                    <td>${check.message}</td>
                    <td class="status-${check.type.toLowerCase()}">${check.type.toUpperCase()}</td>
                </tr>
            `).join('')}
        </tbody>
    </table>
  `;
};

const generateReferences = (data: ReportData): string => {
  const standardReferences = [
    'IS 456:2000 - Plain and Reinforced Concrete - Code of Practice',
    'IS 1893:2016 - Criteria for Earthquake Resistant Design of Structures',
    'IS 875:1987 - Code of Practice for Design Loads for Buildings and Structures',
    'SP 16:1980 - Design Aids for Reinforced Concrete to IS 456:1978'
  ];

  const allReferences = [...standardReferences, ...(data.references || [])];

  return `
    <ol class="references-list">
        ${allReferences.map(ref => `<li>${ref}</li>`).join('')}
    </ol>
  `;
};

// Utility functions
const formatParameterName = (key: string): string => {
  return key.replace(/([A-Z])/g, ' $1')
           .replace(/^./, str => str.toUpperCase())
           .replace(/_/g, ' ');
};

const getParameterUnit = (key: string): string => {
  const units: Record<string, string> = {
    width: 'mm',
    depth: 'mm',
    height: 'mm',
    clearCover: 'mm',
    fck: 'MPa',
    fy: 'MPa',
    axialLoad: 'kN',
    momentX: 'kN.m',
    momentY: 'kN.m',
    mainBarDia: 'mm',
    stirrupDia: 'mm',
    stirrupSpacing: 'mm'
  };
  return units[key] || '-';
};

const getParameterReference = (key: string): string => {
  const references: Record<string, string> = {
    fck: 'IS 456:2000',
    fy: 'IS 1786:2008',
    clearCover: 'IS 456:2000, Table 16',
    safetyFactorConcrete: 'IS 456:2000, Cl. 36.4',
    safetyFactorSteel: 'IS 456:2000, Cl. 36.4'
  };
  return references[key] || 'Design Input';
};

const getResultUnit = (key: string): string => {
  const units: Record<string, string> = {
    grossArea: 'mm²',
    netArea: 'mm²',
    concreteVolume: 'm³',
    steelWeight: 'kg',
    requiredReinforcement: 'mm²',
    providedReinforcement: 'mm²',
    reinforcementRatio: '%',
    designCapacity: 'kN',
    utilizationRatio: '%'
  };
  return units[key] || '-';
};

const getResultStatus = (key: string, value: any): string => {
  if (key === 'utilizationRatio') {
    const ratio = typeof value === 'number' ? value : parseFloat(value);
    if (ratio > 1.0) return '<span class="status-error">EXCEEDED</span>';
    if (ratio > 0.9) return '<span class="status-warning">HIGH</span>';
    return '<span class="status-ok">OK</span>';
  }
  return '<span class="status-ok">OK</span>';
};

// CSS styles for the report
const getReportCSS = (): string => {
  return `
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Arial', sans-serif;
        line-height: 1.6;
        color: #333;
        background: #fff;
    }

    .report-container {
        max-width: 210mm;
        margin: 0 auto;
        padding: 20mm;
        background: white;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    .report-header {
        border-bottom: 3px solid #2563eb;
        padding-bottom: 20px;
        margin-bottom: 30px;
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .logo-section h1 {
        color: #2563eb;
        font-size: 24px;
        margin-bottom: 5px;
    }

    .company-name {
        color: #666;
        font-size: 14px;
    }

    .project-info h2 {
        color: #1e40af;
        font-size: 20px;
        margin-bottom: 15px;
    }

    .info-table {
        border-collapse: collapse;
    }

    .info-table td {
        padding: 5px 15px 5px 0;
        font-size: 14px;
    }

    .section {
        margin-bottom: 30px;
        page-break-inside: avoid;
    }

    .section h2 {
        color: #1e40af;
        font-size: 18px;
        margin-bottom: 15px;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 5px;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

    .data-table th,
    .data-table td {
        border: 1px solid #d1d5db;
        padding: 8px 12px;
        text-align: left;
    }

    .data-table th {
        background-color: #f3f4f6;
        font-weight: bold;
        color: #374151;
    }

    .data-table tr:nth-child(even) {
        background-color: #f9fafb;
    }

    .calculations-container {
        background: #f8fafc;
        border-radius: 8px;
        padding: 20px;
    }

    .calculation-step {
        display: flex;
        margin-bottom: 25px;
        padding-bottom: 20px;
        border-bottom: 1px solid #e2e8f0;
    }

    .calculation-step:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .step-number {
        flex-shrink: 0;
        width: 40px;
        height: 40px;
        background: #2563eb;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-right: 20px;
    }

    .step-content h4 {
        color: #1e40af;
        margin-bottom: 10px;
    }

    .formula,
    .calculation,
    .result,
    .reference {
        margin-bottom: 8px;
        font-size: 14px;
    }

    .formula code {
        background: #e5e7eb;
        padding: 2px 6px;
        border-radius: 4px;
        font-family: 'Courier New', monospace;
    }

    .result-value {
        color: #059669;
        font-weight: bold;
    }

    .reference {
        color: #6b7280;
        font-style: italic;
    }

    .compliance-badge {
        display: inline-block;
        padding: 8px 16px;
        border-radius: 6px;
        font-weight: bold;
        margin: 15px 0;
    }

    .compliance-badge.compliant {
        background: #d1fae5;
        color: #065f46;
        border: 1px solid #a7f3d0;
    }

    .compliance-badge.non-compliant {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #fca5a5;
    }

    .warnings,
    .errors {
        margin: 15px 0;
        padding: 15px;
        border-radius: 6px;
    }

    .warnings {
        background: #fef3c7;
        border: 1px solid #f59e0b;
    }

    .warnings h4 {
        color: #92400e;
    }

    .errors {
        background: #fee2e2;
        border: 1px solid #ef4444;
    }

    .errors h4 {
        color: #991b1b;
    }

    .status-ok {
        color: #059669;
        font-weight: bold;
    }

    .status-warning {
        color: #d97706;
        font-weight: bold;
    }

    .status-error {
        color: #dc2626;
        font-weight: bold;
    }

    .references-list {
        padding-left: 20px;
    }

    .references-list li {
        margin-bottom: 8px;
    }

    .report-footer {
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid #e5e7eb;
        text-align: center;
        color: #6b7280;
        font-size: 12px;
    }

    .compliant {
        color: #059669;
        font-weight: bold;
        text-align: center;
        padding: 20px;
        background: #d1fae5;
        border-radius: 8px;
    }

    @media print {
        .report-container {
            box-shadow: none;
            margin: 0;
            padding: 15mm;
        }
        
        .section {
            page-break-inside: avoid;
        }
        
        .calculation-step {
            page-break-inside: avoid;
        }
    }
  `;
};

// Export functions for PDF generation (would require additional libraries)
export const generatePDFReport = async (data: ReportData, template: ReportTemplate): Promise<Blob> => {
  // This would require a PDF generation library like jsPDF or Puppeteer
  // For now, return a placeholder
  const htmlContent = generateHTMLReport(data, template);
  const blob = new Blob([htmlContent], { type: 'text/html' });
  return blob;
};

export const downloadReport = (data: ReportData, template: ReportTemplate, format: 'html' | 'pdf' = 'html'): void => {
  if (format === 'html') {
    const htmlContent = generateHTMLReport(data, template);
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${data.projectInfo.name.replace(/\s+/g, '_')}_report.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  } else {
    // PDF generation would be implemented here
    console.log('PDF generation not implemented yet');
  }
};